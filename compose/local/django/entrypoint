#!/bin/bash

# if any of the commands in your code fails for any reason, the entire script fails
set -o errexit
# fail exit if one of your pipe command fails
set -o pipefail
# exits if any of your variables is not set
set -o nounset


# we can use a shell script called entrypoint to ensure that we can actually
# connect to the database before we spin up the web service.
# We defined a postgres_ready function that gets called in loop. The code will
# then continue to loop until the Postgres server is available.  exec "$@" is
#         used to make the entrypoint a pass through to ensure that Docker runs
#         the command the user passes in (command: /start, in our case).
postgres_ready() {
python << END
import sys

import psycopg2

try:
    psycopg2.connect(
        user="${SQL_USER}",
        dbname="${SQL_DATABASE}",
        password="${SQL_PASSWORD}",
        host="${SQL_HOST}",
        port="${SQL_PORT}",
    )
except psycopg2.OperationalError:
    sys.exit(-1)
sys.exit(0)

END
}
until postgres_ready; do
  >&2 echo 'Waiting for PostgreSQL to become available...'
  sleep 1
done
>&2 echo 'PostgreSQL is available'

exec "$@"
